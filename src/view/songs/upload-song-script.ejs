<script type="module">
    // Import the functions you need from the SDKs you need
    import {initializeApp} from "https://www.gstatic.com/firebasejs/9.19.1/firebase-app.js";
    // TODO: Add SDKs for Firebase products that you want to use
    // https://firebase.google.com/docs/web/setup#available-libraries

    // Your web app's Firebase configuration
    const firebaseConfig = {
        apiKey: "AIzaSyDxG2vMNkqz1sf4UGAaMzcaq3lVdAN5C8M",
        authDomain: "users-8f542.firebaseapp.com",
        projectId: "users-8f542",
        storageBucket: "users-8f542.appspot.com",
        messagingSenderId: "351740883393",
        appId: "1:351740883393:web:b9c6a3bba9f040cf3ebf40",
        measurementId: "G-KN5Q9HHHL7"
    };
    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
</script>
<script type="module">
    import {
        getStorage,
        ref,
        uploadBytesResumable,
        getDownloadURL
    } from "https://www.gstatic.com/firebasejs/9.19.1/firebase-storage.js";

    const storage = getStorage();

    // Create the file metadata
    /** @type {any} */
    const metadata = {
        contentType: 'audio/mp3'
    };

    // function uploadAudio(e) {
    //     // let uploader = document.getElementById('uploader');
    //     let file = e.target.files[0];
    //
    //     // Upload file and metadata to the object 'images/mountains.jpg'
    //     const storageRef = ref(storage, 'audios/' + file.name);
    //     const uploadTask = uploadBytesResumable(storageRef, file, metadata);
    //     document.getElementById("progress-bar").hidden = false;
    //
    //     // Listen for state changes, errors, and completion of the upload.
    //     uploadTask.on('state_changed',
    //         (snapshot) => {
    //             // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
    //             const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
    //             console.log('Upload is ' + progress + '% done');
    //             let progressBar = document.getElementById("upload-progress");
    //             progressBar.style.width = Math.round(progress) + "%";
    //             progressBar.innerHTML = Math.round(progress) + "%";
    //             switch (snapshot.state) {
    //                 case 'paused':
    //                     console.log('Upload is paused');
    //                     break;
    //                 case 'running':
    //                     console.log('Upload is running');
    //                     break;
    //             }
    //         },
    //         (error) => {
    //             // A full list of error codes is available at
    //             // https://firebase.google.com/docs/storage/web/handle-errors
    //             switch (error.code) {
    //                 case 'storage/unauthorized':
    //                     // User doesn't have permission to access the object
    //                     break;
    //                 case 'storage/canceled':
    //                     // User canceled the upload
    //                     break;
    //
    //                 // ...
    //
    //                 case 'storage/unknown':
    //                     // Unknown error occurred, inspect error.serverResponse
    //                     break;
    //             }
    //         },
    //         () => {
    //             // Upload completed successfully, now we can get the download URL
    //             getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
    //                 console.log('File available at', downloadURL);
    //                 // alert("Upload complete");
    //
    //                 document.getElementById("notification").innerHTML = `
    //                     <div class="alert alert-success alert-dismissible fade show notification" role="alert" id="success-register"
    //      hidden="">
    //     <i class="fa fa-exclamation-circle me-2"></i>Upload successfully!
    //     <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    // </div>
    //                 `;
    //                 document.getElementById("success-register").removeAttribute("hidden");
    //                 $('#success-register').alert();
    //
    //                 document.getElementById("song-url").value = downloadURL;
    //                 if (document.getElementById("song-title").value === "") {
    //                     document.getElementById("song-title").value = file.name.split(".").at(-2);
    //                 }
    //                 setTimeout(()=> {
    //                     document.getElementById("upload-button").disabled = false;
    //                 }, 500)
    //             });
    //         }
    //     );
    // }
    // window.uploadAudio = uploadAudio;
</script>
<script>
    let artistSuggestionList = [];
    let artistNameInput = document.getElementById("artist-name-input");
    let artistIDList = document.getElementById("artist-id-list");
    artistNameInput.addEventListener("input", function () {
        fetch(`http://127.0.0.1:1800/artists?name=${artistNameInput.value}`)
            .then((response) => response.json())
            .then((data) => {
                artistSuggestionList = data;
                // data.forEach(item => {
                //     console.log(item)
                // })
                console.log("received data:", data);
                inputTriggerHandle2(artistNameInput, artistSuggestionList)
            })
            .catch(console.error);
    })

    function inputTriggerHandle2(inp, arr) {
        console.log("possible arr:", arr);
        let a, b, i, val = inp.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists(inp);
        /*create a DIV element that wil l contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", inp.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items p-3");
        a.setAttribute("style", "color: white");
        /*append the DIV element as a child of the autocomplete container:*/
        inp.parentNode.appendChild(a);
        /*for each item in the array...*/
        for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            // if (arr[i].title.slice(0, val.length).toUpperCase() === val.toUpperCase()) {
            let artistName = arr[i].name;
            let startIndex = artistName.toUpperCase().indexOf(val.toUpperCase());
            if (artistName.toUpperCase().includes(val.toUpperCase())) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML = artistName.slice(0, startIndex);
                b.innerHTML += "<strong>" + artistName.slice(startIndex, startIndex + val.length) + "</strong>";
                b.innerHTML += artistName.slice(startIndex + val.length);
                /*insert an input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + artistName + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                let artistID = arr[i]._id;
                b.addEventListener("click", function (e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    document.getElementById("chosen-artist-id").value = artistID;
                    /*close the list of autocompleted values,
                    (or any other open lists of autocompleted values:*/
                    closeAllLists(inp);
                });
                a.appendChild(b);
            }
        }
    }

    function closeAllLists(inp, element) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        let x = document.getElementsByClassName("autocomplete-items");
        for (let i = 0; i < x.length; i++) {
            if (element !== x[i] && element !== inp) {
                x[i].parentNode.removeChild(x[i]);
            }
        }
    }

    document.addEventListener("click", function (e) {
        closeAllLists(artistNameInput, e.target);
    });

    let addArtistButton = document.getElementById("add-artist-button");
    addArtistButton.addEventListener("click", async function () {
        let gotArtist = await getArtistID();
        console.log("gotArtist:", gotArtist)
        let toAddArtistID = gotArtist.id;
        let artistName = document.getElementById("artist-name-input").value;
        let artistIDArr = [];
        if (artistIDList.value !== "") {
            artistIDArr = JSON.parse(artistIDList.value);
        }
        if (artistIDArr.indexOf(toAddArtistID) < 0) {
            artistIDArr.push(toAddArtistID);
            artistIDList.value = JSON.stringify(artistIDArr);
            console.log(artistIDList.value)
            let artistShowDiv = document.getElementById("artist-show-div");
            let b = `
                <button type="button" class="btn btn-primary position-relative" onclick="removeArtist(this.value)" value="${toAddArtistID}" id="${toAddArtistID}">
                ${artistName}
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        x
                        <span class="visually-hidden">remove artist button</span>
                    </span>
                </button>
            `;
            document.getElementById("artist-name-input").value = "";
            document.getElementById("chosen-artist-id").value = "";
            artistShowDiv.innerHTML += b;
        }
    });

    async function getArtistID() {
        let gotArtist;
        await fetch(`http://127.0.0.1:1800/artists/get-by-name?name=${artistNameInput.value}`)
            .then((response) => response.json())
            .then((data) => {
                console.log("received data:", data);
                gotArtist = data;
            })
            .catch(console.error);
        return gotArtist;
    }

    function removeArtist(artistID) {
        let artistIDArr = JSON.parse(artistIDList.value);
        let index = artistIDArr.findIndex(item => item === artistID);
        artistIDArr.splice(index, 1);
        artistIDList.value = JSON.stringify(artistIDArr);
        console.log(artistIDList.value)
        document.getElementById(artistID).remove();
    }

    function submitForm() {
        console.log(document.getElementById("upload-button").getAttribute("disabled"));
        // if (document.getElementById("upload-button").)
        let uploadForm = document.getElementById("upload-form");
        let formData = new FormData(uploadForm);
        formData.append("sid", getCookie("sid"));
        const plainFormData = Object.fromEntries(formData.entries());
        console.log(plainFormData)
        const formDataJsonString = JSON.stringify(plainFormData);
        console.log("formDataJsonString:", formDataJsonString);
        const uploadRequest = new Request("http://127.0.0.1:1800/songs", {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: formDataJsonString
        });
        fetch(uploadRequest)
            .then((response) => response.json())
            .then((data) => {
                console.log("received data:", data);
                if (data.success) {
                    // alert("Register successfully");
                    document.getElementById("notification").innerHTML = `
                        <div class="alert alert-success alert-dismissible fade show notification" role="alert" id="success-register"
         hidden="">
        <i class="fa fa-exclamation-circle me-2"></i>Song is successfully create, check here <a href="/songs/your-songs">Your Songs</a>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
                    `;
                    document.getElementById("success-register").removeAttribute("hidden");
                    $('#success-register').alert();

                    uploadForm.reset();
                    console.log(new FormData(uploadForm).entries())
                } else {
                    // alert("Register unsuccessfully");
                    document.getElementById("notification").innerHTML = `
                        <div class="alert alert-primary alert-dismissible fade show notification" role="alert" id="failed-register" hidden="">
        <i class="fa fa-exclamation-circle me-2"></i>Register unsuccessfully
        <button type="button" class="btn-close" aria-label="Close" onclick="$('#failed-register').alert('close')"></button>
    </div>
                    `;
                    document.getElementById("failed-register").removeAttribute("hidden");
                    $('#failed-register').alert();
                }

            })
            .catch(console.error);
    }
</script>